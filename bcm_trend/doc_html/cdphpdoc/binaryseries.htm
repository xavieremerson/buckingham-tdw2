<HTML>
<HEAD>
<Title>Binary Data Series</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (PHP Edition)</p>
<p class="heading1">Binary Data Series</p>
<hr class="separator">
<div class="content">
<img src="images/binaryseries.png">
<br><br>
This example demonstrates a chart representing binary data series.<br><br>
A binary data series is a series with elements that can only assume two values. In this example, 0 and 1 are used to represent the two values.<br><br>
There are plenty of methods to represent binary data series in a chart. In this example, three methods are demonstrated.<br><br>
<ul><li> The "Logic Line" is created by using a step line layer to represent the binary series as a step line. The step line layer is added using <a href="XYChart.addStepLineLayer.htm">XYChart.addStepLineLayer</a>.<br><br>
<li> The "ON/OFF Filling" is created by using two complementary logic lines (that is, one line is always the reverse of the other line). An <a href="InterLineLayer.htm">InterLineLayer</a> is used to fill the region between the two lines, with the fill color dependent on which line is on top.<br><br>
<li> The "ON Only Filling" is the same as the "ON/OFF Filling", except that one of the fill colors is set to <a href="phpchartdir.Transparent.htm">Transparent</a>.</ul>
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[File: phpdemo/binaryseries.php]</b>
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;?php
require_once("../lib/phpchartdir.php");

# The data for the chart
$dataY = array(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1);
$dataX = array(chartTime(2008, 7, 1, 0, 0, 0), chartTime(2008, 7, 1, 2, 17, 2),
    chartTime(2008, 7, 1, 8, 5, 30), chartTime(2008, 7, 1, 10, 54, 10), chartTime(
    2008, 7, 1, 15, 40, 0), chartTime(2008, 7, 1, 18, 22, 20), chartTime(2008, 7, 1,
    22, 17, 14), chartTime(2008, 7, 2, 2, 55, 50), chartTime(2008, 7, 2, 8, 17, 14),
    chartTime(2008, 7, 2, 11, 55, 50), chartTime(2008, 7, 2, 13, 17, 14), chartTime(
    2008, 7, 2, 17, 55, 50), chartTime(2008, 7, 2, 20, 17, 14), chartTime(2008, 7, 3,
    0, 0, 0));

# In this example, we only use position 1, 3, 5 for the data series. Positions 0, 2,
# 4, 6 are empty and serve as gaps.
$labels = array("", "ON Only Filling", "",
    "&lt;*font,color=cc2200*&gt;ON&lt;*/font*&gt; / &lt;*font,color=00aa22*&gt;OFF&lt;*/font*&gt; Filling",
    "", "Logic Line", "");

# Create a XYChart object of size 600 x 180 pixels
$c = new XYChart(600, 180);

# Add a title to the chart using 10 points Arial Bold font. Set top/bottom margins to
# 12 pixels.
$title = $c-&gt;addTitle("Binary Data Series Demonstration", "arialbd.ttf", 10);

# Tentatively set the plotarea at (100, 30) and of size 470 x 120 pixels. Use
# transparent border. Use grey (888888) solid line and light grey (ccccc) dotted line
# as major and minor vertical grid lines.
$plotAreaObj = $c-&gt;setPlotArea(100, 30, 470, 120, -1, -1, Transparent);
$plotAreaObj-&gt;setGridColor(Transparent, 0x888888, Transparent, $c-&gt;dashLineColor(
    0xcccccc, DotLine));

# Set axes to transparent
$c-&gt;xAxis-&gt;setColors(Transparent);
$c-&gt;yAxis-&gt;setColors(Transparent);

# Set the y axis labels
$c-&gt;yAxis-&gt;setLabels($labels);

# Set y-axis label style to 8pts Arial Bold
$c-&gt;yAxis-&gt;setLabelStyle("arialbd.ttf", 8);

# Set x-axis major and minor tick density to 50 and 5 pixels. ChartDirector
# auto-scaling will use this as the guideline when putting ticks on the x-axis.
$c-&gt;xAxis-&gt;setTickDensity(50, 5);

# Use "&lt;*font=Arial Bold*&gt;{value|mmm dd}" for the first label of an hour, and
# "{value|hh:nn}" for all other labels.
$c-&gt;xAxis-&gt;setMultiFormat(StartOfDayFilter(), "&lt;*font=arialbd.ttf*&gt;{value|mmm dd}",
    AllPassFilter(), "{value|hh:nn}");

#
# A Logic Line can be achieved using a StepLineLayer in ChartDirector
#

# Shift the data by 4.5, so instead of 0 - 1, it is now 4.5 to 5.5, or fluctuate
# around the y = 5 (Logic Line label) position.
$tmpArrayMath1 = new ArrayMath($dataY);
$tmpArrayMath1-&gt;add(4.5);
$shiftedLine0 = $tmpArrayMath1-&gt;result();

# Add step lines using the original and the reversed data
$layer0 = $c-&gt;addStepLineLayer($shiftedLine0, 255);
$layer0-&gt;setXData($dataX);

#
# To perform ON/OFF filling, we draw the logic line, and its reverse, and fill the
# region in between
#

# Shift the data by 2.5, so instead of 0 - 1, it is now 2.5 to 3.5, or fluctuate
# around the y = 3 (ON/OFF Filing label) position.
$tmpArrayMath1 = new ArrayMath($dataY);
$tmpArrayMath1-&gt;add(2.5);
$shiftedLine1 = $tmpArrayMath1-&gt;result();
# Reverse the data, so the 0 becomes 1 and 1 becomes 0, and shift it as well.
$tmpArrayMath1 = new ArrayMath($dataY);
$tmpArrayMath1-&gt;mul(-1);
$tmpArrayMath1-&gt;add(3.5);
$reverseShiftedLine1 = $tmpArrayMath1-&gt;result();

# Add step lines using the original and the reversed data
$layer1 = $c-&gt;addStepLineLayer($shiftedLine1, Transparent);
$layer1-&gt;addDataSet($reverseShiftedLine1, Transparent);
$layer1-&gt;setXData($dataX);

# Fill the region between the two step lines with green (00aa22) or red (cc2200),
# depending on whether the original or the reserve is higher.
$c-&gt;addInterLineLayer($layer1-&gt;getLine(0), $layer1-&gt;getLine(1), 0x00aa22, 0xcc2200);

#
# The ON Only filling is the same as ON/OFF filling, except the OFF filling color is
# transparent
#

# Shift the data by 0.5, so instead of 0 - 1, it is now 0.5 to 1.5, or fluctuate
# around the y = 1 (ON Only Filing label) position.
$tmpArrayMath1 = new ArrayMath($dataY);
$tmpArrayMath1-&gt;add(0.5);
$shiftedLine2 = $tmpArrayMath1-&gt;result();
# Reverse the data, so the 0 becomes 1 and 1 becomes 0, and shift it as well.
$tmpArrayMath1 = new ArrayMath($dataY);
$tmpArrayMath1-&gt;mul(-1);
$tmpArrayMath1-&gt;add(1.5);
$reverseShiftedLine2 = $tmpArrayMath1-&gt;result();

# Add step lines using the original and the reversed data
$layer2 = $c-&gt;addStepLineLayer($shiftedLine2, Transparent);
$layer2-&gt;addDataSet($reverseShiftedLine2, Transparent);
$layer2-&gt;setXData($dataX);

# Fill the region between the two step lines with green (00aa22) or transparent,
# depending on whether the original or the reserve is higher.
$c-&gt;addInterLineLayer($layer2-&gt;getLine(0), $layer2-&gt;getLine(1), 0x00aa22, Transparent
    );

# Adjust the plot area size, such that the bounding box (inclusive of axes) is 10
# pixels from the left edge, 10 pixels  below the title, 30 pixels from the right
# edge, and 10 pixels above the bottom edge.
$c-&gt;packPlotArea(10, $title-&gt;getHeight() + 10, $c-&gt;getWidth() - 30, $c-&gt;getHeight() -
    10);

# Output the chart
header("Content-type: image/png");
print($c-&gt;makeChart2(PNG));
?&gt;</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
