<HTML>
<HEAD>
<Title>Contour Interpolation</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (PHP Edition)</p>
<p class="heading1">Contour Interpolation</p>
<hr class="separator">
<div class="content">
<img src="images/contourinterpolate0.jpg">&nbsp;&nbsp;<img src="images/contourinterpolate1.jpg">&nbsp;&nbsp;<img src="images/contourinterpolate2.jpg">&nbsp;&nbsp;<img src="images/contourinterpolate3.jpg">
<br><br>
This example demonstrates spline and linear surface interpolation, and discrete and continuous coloring.<br><br>
The data points for the contour layer are the z values at certain (x, y) points. However, to draw the contour and to color the layer, it is necessarily to know the z values at all pixels in the xy plane. ChartDirector uses surface interpolation to compute the z values at all pixels from the given data points. Two types of interpolation - spline and linear - are supported. They can be configured using <a href="ContourLayer.setSmoothInterpolation.htm">ContourLayer.setSmoothInterpolation</a>.<br><br>
The coloring of the contour layer can be discrete or continuous, configurable using <a href="ColorAxis.setColorGradient.htm">ColorAxis.setColorGradient</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[File: phpdemo/contourinterpolate.php]</b>
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;?php
require_once("../lib/phpchartdir.php");

# The x and y coordinates of the grid
$dataX = array(-4, -3, -2, -1, 0, 1, 2, 3, 4);
$dataY = array(-4, -3, -2, -1, 0, 1, 2, 3, 4);

# The values at the grid points. In this example, we will compute the values using
# the formula z = Sin(x * pi / 3) * Sin(y * pi / 3).
$dataZ = array_pad(array(), count($dataX) * count($dataY), 0);
for($yIndex = 0; $yIndex &lt; count($dataY); ++$yIndex) {
    $y = $dataY[$yIndex];
    for($xIndex = 0; $xIndex &lt; count($dataX); ++$xIndex) {
        $x = $dataX[$xIndex];
        $dataZ[$yIndex * count($dataX) + $xIndex] = sin($x * 3.1416 / 3) * sin($y *
            3.1416 / 3);
    }
}

# Create a XYChart object of size 360 x 360 pixels
$c = new XYChart(360, 360);

# Set the plotarea at (30, 25) and of size 300 x 300 pixels. Use semi-transparent
# black (c0000000) for both horizontal and vertical grid lines
$c-&gt;setPlotArea(30, 25, 300, 300, -1, -1, -1, 0xc0000000, -1);

# Add a contour layer using the given data
$layer = $c-&gt;addContourLayer($dataX, $dataY, $dataZ);

# Set the x-axis and y-axis scale
$c-&gt;xAxis-&gt;setLinearScale(-4, 4, 1);
$c-&gt;yAxis-&gt;setLinearScale(-4, 4, 1);

if ($_REQUEST["img"] == "0") {
    # Discrete coloring, spline surface interpolation
    $c-&gt;addTitle("Spline Surface - Discrete Coloring", "arialbi.ttf", 12);
} else if ($_REQUEST["img"] == "1") {
    # Discrete coloring, linear surface interpolation
    $c-&gt;addTitle("Linear Surface - Discrete Coloring", "arialbi.ttf", 12);
    $layer-&gt;setSmoothInterpolation(false);
} else if ($_REQUEST["img"] == "2") {
    # Smooth coloring, spline surface interpolation
    $c-&gt;addTitle("Spline Surface - Continuous Coloring", "arialbi.ttf", 12);
    $layer-&gt;setContourColor(Transparent);
    $layer-&gt;colorAxis-&gt;setColorGradient(true);
} else {
    # Discrete coloring, linear surface interpolation
    $c-&gt;addTitle("Linear Surface - Continuous Coloring", "arialbi.ttf", 12);
    $layer-&gt;setSmoothInterpolation(false);
    $layer-&gt;setContourColor(Transparent);
    $layer-&gt;colorAxis-&gt;setColorGradient(true);
}

# Output the chart
header("Content-type: image/jpeg");
print($c-&gt;makeChart2(JPG));
?&gt;</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
