/*
How to use this script:
 1. Put <script src="sorttable.js"></script> in your html page <head> section.
 2. In the tables you want to sort, add 'class="sortable"'.  Say, originally
    your table style is <table style="myoldstyle">, now it should be 
    <table style="myoldstyle sortable">
 That's it! You can already enjoy the sortable tables now! For advanced usage,
 read on!

Authors and feature lists:
 This script by Mingyi Liu is based upon the excellent script by Stuart
 Langridge.  His original script (2003) has these features:
   1. Ease of use - just include the script in your html and add "sortable" 
      as your table's class.  That's it!
   2. Faster than many sorttable scripts out there.
   3. Automatically detects date, number, text, currency types and sort them.
   4. X-browser support for most browsers (but not for some or all Safari 
      or Mac IE versions).
   5. Support multiple tables on same html page.
   6. Works with thead, tbody, th, etc. html tags.

 Mingyi Liu made fairly significant additions (2006) to allow more features
   and more customizations, specifically:
   1. Allow user to specify tables that should be sorted right after
      the html page is loaded.
   2. Support more date (and time) string format.
   3. Support detection and sorting of IP addresses.
   4. Better currency sorting support (negatives and more default
      currencies). One could force sorting of unrecognized currencies too.
   5. Support fast (0 second) resorting when table content will not be changed
      by other javascript.
   6. Support various levels of style preserving (row-level, cell-level or 
      table-level (default)). Particularly useful for table rows that're
      alternatively highlighted.
   7. Allow user to specify column data type explicitly.
   8. Support for user-supplied sorting function for custom data type.
   9. Allow customization of the style of the table heading clickable links.
   10. Sort US, European and user-specified dates (and time)!
   11. Improved reliability over offending data (like non-number in a number
       column).
   12. Works with tfoot html tag.
   13. Allows multi-row header and footer.
   14. Better number sorting - Support scientific notations, negative, positive
       numbers. Allow force parsing text-containing columns as numbers.
 At time of release, script was tested on FF 1.5, Netscape 8.1 and IE 6.0 and
 it should work well in most browsers. 

 Note that there are some fixes for Stuart's code at http://blog.webkist.com/archives/000043.html
   that I probably did not incorporate here (yet). Also there are alternative
   table sorting scripts out there (I even have another one which is a big fix
   on a good but non-functional alternative), but I personally think this one is
   now the best one considering ease of use, customizability, speed and features.

License: 
 You can do whatever you want with the script, but it'd be 
 tradition-honoring if you give authors credit or simply keep this 
 header comment section intact. BTW, also observe the tradition of 
 most freewares - no warranty provided and use it at your own risk! ;)

Advanced usage:
 1. You can change the variables in the sections marked as modify as needed.
 2. Currency detection is limited to a few common ones (¥£€$), so if you have,
    say, YMB, just add ts_type="money" to the column heading, e.g., 
    <td ts_type="money"> or <th ts_type="money">. That's it! It'll be sorted
    correctly. In fact, it's always a good idea to specify money columns as
    type "money", even if it's US $, euro, etc.
 3. You could also force data type to be "number", "ip", "date" the same way
    as "money". You could even specify ts_type to be "custom", but then you
    must supply valid javascript code that accesses the values a and b and
    evaluates to negative, positive or 0 (like any comparison function). e.g.:
    implement numeric sorting:
      <td ts_type="custom" ts_sortfn="aa=parseFloat(a);bb=parseFloat(b); if(isNaN(aa)) aa=0; if(isNaN(bb)) bb=0; aa-bb;">My number column header cell</td>
    implement your own IP sorting:
      <th ts_type="custom" ts_sortfn="aa=a.split('.');bb=b.split('.');(aa[0] - bb[0] || aa[1] - bb[1] || aa[2] - bb[2] || aa[3] - bb[3]);">My IP column header cell</th>
    Note that:
    a. You must know what you're doing!
    b. Due to the use of eval, the custom function is always slower than 
       defining function in this script directly (but using custom function 
       keeps code here cleaner during updates).
 4. Add 'sortdir="desc"'' on any table header column to indicate that the 
    table should be sorted right after page is loaded. Use 'asc' for ascending
    sorting order. Example: <td sortdir="desc">the default sorting column</td>
 5. Use <table preserve_style="cell"> on any table to indicate that the table 
    redrawing after sorting should preserve cell style (override the global
    preserve_style variable that you can set below). The other valid preserve_style
    is "row", which is very useful if you use alternating colors for table rows.
    Note that row style is slower than default, cell style is even slower due to
    more update needed.
    IE has a "design" (read:bug) that prevents setting innerHTML for rows ("design"
    explained in http://msdn.microsoft.com/workshop/author/tables/buildtables.asp#TOM_Create, 
    bug documented for selects at http://support.microsoft.com/default.aspx?scid=kb;en-us;276228#appliesto).
    Therefore for IE, "row" is actually equivalent with "cell" because it is implemented
    the same way (blame IE for the speed!).         
 6. Use <td ts_type="euro_date"> to indicate date format is DD/MM/YY or DD/MM/YYYY
    Using <td ts_type="other_date" ts_date_format="D/M/Y"> you can also indicate 
    it's european dates. <td ts_type="other_date" ts_date_format="D-M-Y"> is 
    also european dates separated by '-' not '/'. Use the formatting you 
    could specify other date format, like Y-M-D. If Y is double digit, any number
    smaller than 32 is deemed 20xx, otherwise it's 19xx.  Note that D/M/Y (or any
    user-specified format) could just part of the time string (the date part),
    time conversion will be done correctly. Also note that if you choose custom
    date format, due to the time consumed during date conversion, the sorting
    would be much slower (2-3 times as slow).
    The date/time formats accepted are: 
     1. Anything accepted directly by Javascript's Date.parse() function 
       (format best explained at "http://java.sun.com/j2se/1.3/docs/api/java/util/Date.html#parse(java.lang.String)");
     2. Any combination of a date type specified by you and a time (hour, min, 
        seconds) format accepted by Date.parse(). Check the demo html page (http://www.mingyi.org/other/ts_demo.html) for 
        examples.
*/